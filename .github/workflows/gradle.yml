name: Java CI with Gradle

# master 브랜치의 push와 pull로 CI가 작동
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - uses : actions/checkout@v3
    - run : touch ./src/main/resources/application.properties
    - run : echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
    - run : cat ./src/main/resources/application.properties
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean build

    - name: Make zip file
      run: zip -r ./short-url.zip .
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
      # 깃허브 Secret에 넣어둔 Access key
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # 깃허브 Secret에 넣어둔 Secret key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # 깃허브 Secret에 넣어둔 Region
        aws-region: ${{ secrets.AWS_REGION }}

	#3
	# 만들어 놓은 S3에 해당 zip 파일 저장
    - name: Upload to S3
      run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./short-url.zip s3://short-url/short-url.zip
    
    #4
    # AWS CodeDeploy에 배포
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name short-url-deploy \
        --deployment-group-name short-url-sever \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=short-url,bundleType=zip,key=short-url.zip \
        --region ${{ secrets.AWS_REGION }}
